aes(carat, price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_log10() +
geom_point(color = I('#F79420'), alpha = 1/4)
ggplot(diamonds,
aes(carat, price)) +
scale_y_log10() +
geom_point(color = I('#F79420'), alpha = 1/4)
cuberoot_trans <- function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(diamonds,
aes(carat, price)) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
geom_point(color = I('#F79420'), alpha = 1/4) +
ggtitle('Price log10 by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
table(diamonds$carat)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(aes(alpha = 1/2, size = 3/4)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds, color = clarity) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
names(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = diamonds$clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat ^ (1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
header=TRUE, stringsAsFactors=FALSE)
galton <- read.csv("http://blog.yhathq.com/static/misc/galton.csv",
header=TRUE,
stringsAsFactors=FALSE)
summary(galton)
head(galton)
fit <- lm(child ~ parent, data = galton)
fit
summary(fit)
library(reshape2)
phones <- melt(WorldPhones)
head(phones)
names(phones) <- c("year", "continent", "n_phones")
head(phones)
fit2 <- lm(n_phones ~ year + continent, data=phones)
summary(fit2)
plot(fit)
plot(fit2)
con <- url("http://jhsph.edu", "r")
x <- readLines(con)
head(x)
x
install.packages("swirl")
library(sworl)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- (z / my_sqrt)
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by = 0.5)
my_seq <- seq(0, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, -1, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Konni")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
install.packages("RMySQL")
??install.packages
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[10,]
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
report <- read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(1, 16, 21, 29, 34, 42, 47, 55, 60), header = F, skip = 4)
head(report)
report <- read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(2, 16, 21, 29, 34, 42, 47, 55, 60), header = F, skip = 4)
head(report)
report <- read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(-1., 9, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3), header = F, skip = 4)
head(report)
sum(v4)
sum(reportv4)
sum(report$v4)
class(report$v4)
class(report$4)
class(report[4])
class(report)
sum(report[4])
sqldf("select distinct AGEP from acs") == nique(acs$AGEP)
sqldf("select distinct AGEP from acs") == unique(acs$AGEP)
gdp <- read.csv("gdp.csv", skip = 5, header = F)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
keep = c(1, 2, 4, 5)
gpd <- gdp[keep]
head(gdp, 2)
head(gdp[keep], 2)
gdp <- gdp[keep]
head(gdp, 2)
names(gdp) <- c("code", "rank", "name", "gdp")
head(gdp, 2)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
edu <- read.csv("education.csv")
nrow(gdp)
nrow(edu)
df <- merge(gdp, edu, by.x = "V1", by.y = "CountryCode")
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
nrow(df)
head(df)
nrow(df)
?sort
?merge
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
names(gdp) <- c("code", "rank", "name", "gdp")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
names(gdp)
names(edu)
edu <- read.csv("education.csv")
names(edu)
nrow(gdp)
nrow(edu)
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode", all = TRUE)
nrow(df)
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
nrow(df)
names(df)
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode", suffixes = c("gdp", "edu"))
names(df)
head(df, 2)
nrow(gdp)
nrow(edu)
nrow(df)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
names(gdp) <- c("code", "rank", "name", "gdp")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
edu <- read.csv("education.csv")
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode",
suffixes = c("gdp", "edu"))
names(df)
nrow(df)
nrow(gdp)
nrow(edu)
unique(gdp$code)
unique(edu$CountryCode)
?setdiff
setdiff(gdp, edu)
setdiff(gd$codep, edu$CountryCode)
setdiff(gdp$code, edu$CountryCode)
setdiff(edu$CountryCode, gdp$code)
sum(gdp$code %in%edu$CountryCode)
sum(gdp$code %in% edu$CountryCode)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x, y)
?read.csv
setwd("~/Documents/Coursera/Data Science Specialization/Exploratory Data Analysis/ExData_Plotting1")
read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
format(object.size(data), units = "auto")
data[1, 1]
class(data[1, 1])
names(data)
data$Date <- as.Date(data$Date)
class(data[1, 1])
data[1, 1]
?as.Date
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
format(object.size(data), units = "auto")
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data[1, 1]
data <- with(data, subset(data, Date %in% c("2007-02-01", "2007-02-02")))
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
format(object.size(data), units = "auto")
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data <- with(data, subset(data, Date %in% c("01/02/2007", "01/02/2007")))
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
data <- data[data$Date == "01/02/2007" | data$Date == "02/02/2007"]
format(object.size(data), units = "auto")
data[1, 1]
data[1, ]
head(data)
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
format(object.size(data), units = "auto")
data <- data[data$Date == "01/02/2007" | data$Date == "02/02/2007", ]
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";")
format(object.size(data), units = "auto")
data[data$Date == "01/02/2007" | data$Date == "02/02/2007", ]
data[data$Date == "01/02/2007" || data$Date == "02/02/2007", ]
data[data$Date == "01/02/2007", ]
head(data)
str(data)
data[as.character(data$Date) == "01/02/2007" ||
as.character(data$Date) == "02/02/2007", ]
data$Date[1]
data[as.character(data$Date) == "1/2/2007" ||
as.character(data$Date) == "2/2/2007", ]
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
head(data)
str(data)
data <- read.csv("household_power_consumption.txt", header = TRUE, sep = ";",
colClasses = c("character", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
?read.csv
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("character", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
head(data)
format(object.size(data), units = "auto")
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("myDate", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
format(object.size(data), units = "auto")
head(data)
subset(data, Date == as.Date("2007-02-01") |
Date == as.Date("2007-02-02"), ]
subset(data, Date == as.Date("2007-02-01") |
Date == as.Date("2007-02-02"))
data <- subset(data, Date == as.Date("2007-02-01") |
Date == as.Date("2007-02-02"))
?strptime
head(data$Time)
setAs("character","myTime", function(from) as.POSIXlt(from, format="%H:%M:%S") )
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("myDate", "myTime", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
str(data)
head(data$Time)
setAs("character","myTime", function(from) as.POSIXct(from, format="%H:%M:%S") )
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("myDate", "myTime", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
str(data)
head(data$Time)
setAs("character", "myTime",
function(from) as.POSIXct(from, format="%H:%M:%S") - trunc(dtPOSIXct, "days") )
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("myDate", "myTime", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
str(data)
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("myDate", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
str(data)
data$Time <- strptime(data$Time, "%T")
str(data)
data$Time <- strptime(data$Time, "%T") - trunc(dtPOSIXct, "days")
str(data)
setAs("character", "myTime",
function(from) as.Date(from, format="%T") )
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("myDate", "myTime", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
str(data)
data <- read.csv("household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c("character", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
format(object.size(data), units = "auto")
data$datetime <- as.POSIXct(paste(x$Date, x$Time), format="%d/%m%Y %H:%M:%S")
data$datetime <- as.POSIXct(paste(data$Date, data$Time), format="%d/%m%Y %H:%M:%S")
head(data)
table(data$Date)
data <- subset(data, Date == "1/2/2007" | Date == "2/2/2007")
data$datetime <- as.POSIXct(paste(data$Date, data$Time),
format="%d/%m%Y %H:%M:%S")
head(data$datetime)
data$datetime <- as.POSIXct(paste(data$Date, data$Time),
format="%d/%m/%Y %H:%M:%S")
head(data$datetime)
data$datetime <- as.POSIXct(paste(data$Date, data$Time),
format="%d/%m/%Y %H:%M:%S", usetz = FALSE)
head(data$datetime)
?as.POSIXct
data$datetime <- as.POSIXct(paste(data$Date, data$Time),
format="%d/%m/%Y %H:%M:%S", tz = "GMT")
?as.POSIXct
head(data$datetime)
names(data)
hist(data$Global_active_power)
hist(data$Global_active_power, main = "Global Active Power")
?hist
hist(data$Global_active_power,
main = "Global Active Power",
col = "red")
hist(data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
col = "red")
?dev.copy
?png
dev.copy(png(width = 480, height = 480), file = "figure/plot1.png")
png(width = 480, height = 480)
dev.copy(png, file = "figure/plot1.png")
hist(data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
col = "red")
dev.copy(png, file = "figure/plot1.png")
hist(data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
col = "red")
dev.print(png, file = "figure/plot1.png", width = 480, height = 480)
dev.cur()
